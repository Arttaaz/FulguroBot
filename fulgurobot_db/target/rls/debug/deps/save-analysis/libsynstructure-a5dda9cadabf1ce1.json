{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2","program":"/home/arttaaz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","synstructure","/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=a5dda9cadabf1ce1","-C","extra-filename=-a5dda9cadabf1ce1","--out-dir","/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps","-L","dependency=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps","--extern","proc_macro2=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libproc_macro2-43e6911b0f536fc2.rlib","--extern","quote=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libquote-0fb3d2f4dbcc16dc.rlib","--extern","syn=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libsyn-06c51060e29e94c1.rlib","--extern","unicode_xid=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libunicode_xid-96ab504864976ba1.rlib","--cap-lints","allow","--error-format=json","--sysroot","/home/arttaaz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libsynstructure-a5dda9cadabf1ce1.rmeta"},"prelude":{"crate_id":{"name":"synstructure","disambiguator":[17072391080063634731,2965206806292338955]},"crate_root":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src","external_crates":[{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15898664672860565043,11507415047301910426]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12015790801788081536,12907150729797279212]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7883193221474685823,4751424176860928009]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16613161923873549938,14995778479778385738]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5004834090936050992,6471634663823578036]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11446119019713242356,2604044839202152600]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15268581892012785008,4107617063810618496]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7224674827591579222,6632076422290107852]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11517724716759652023,4917736713351877169]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5844817230926680697,5589800783749782108]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[17744420590937272489,5474835466175275207]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[2981351777305219230,718285904255885081]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[7543414863148407695,11516516886599562523]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[194739072426214368,18332744792401463366]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":15,"id":{"name":"proc_macro","disambiguator":[7674911766290470547,9215224436840886528]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":16,"id":{"name":"proc_macro2","disambiguator":[15786716693219796021,13493290019550611227]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":17,"id":{"name":"unicode_xid","disambiguator":[10000600429021485266,11631533076862762613]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":18,"id":{"name":"quote","disambiguator":[16579840625968933179,2709492032072526881]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","num":19,"id":{"name":"syn","disambiguator":[2189935432591710275,5760158331311680927]}}],"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":0,"byte_end":75038,"line_start":1,"line_end":2301,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":5894,"byte_end":5895,"line_start":183,"line_end":183,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"ToTokens, quote_spanned, quote","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":2879},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75329,"byte_end":75340,"line_start":6,"line_end":6,"column_start":21,"column_end":32},"alias_span":null,"name":"TokenStream","value":"","parent":{"krate":0,"index":49}},{"kind":"Use","ref_id":{"krate":16,"index":692},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75363,"byte_end":75374,"line_start":7,"line_end":7,"column_start":22,"column_end":33},"alias_span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75378,"byte_end":75390,"line_start":7,"line_end":7,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":49}},{"kind":"Use","ref_id":{"krate":19,"index":4019},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75406,"byte_end":75411,"line_start":8,"line_end":8,"column_start":15,"column_end":20},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":49}},{"kind":"Use","ref_id":{"krate":19,"index":4287},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75413,"byte_end":75422,"line_start":8,"line_end":8,"column_start":22,"column_end":31},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":49}},{"kind":"Use","ref_id":{"krate":19,"index":10720},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":75424,"byte_end":75435,"line_start":8,"line_end":8,"column_start":33,"column_end":44},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":49}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":0,"byte_end":75038,"line_start":1,"line_end":2301,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":176},{"krate":0,"index":197},{"krate":0,"index":196},{"krate":0,"index":194},{"krate":0,"index":192},{"krate":0,"index":190},{"krate":0,"index":187},{"krate":0,"index":199},{"krate":0,"index":218},{"krate":0,"index":217},{"krate":0,"index":215},{"krate":0,"index":213},{"krate":0,"index":211},{"krate":0,"index":208},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":220},{"krate":0,"index":241},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":231},{"krate":0,"index":227},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":244},{"krate":0,"index":266},{"krate":0,"index":264},{"krate":0,"index":261},{"krate":0,"index":257},{"krate":0,"index":254},{"krate":0,"index":250},{"krate":0,"index":269},{"krate":0,"index":290},{"krate":0,"index":287},{"krate":0,"index":283},{"krate":0,"index":280},{"krate":0,"index":276},{"krate":0,"index":74},{"krate":0,"index":84},{"krate":0,"index":293},{"krate":0,"index":314},{"krate":0,"index":311},{"krate":0,"index":307},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":117},{"krate":0,"index":174}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":49},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/macros.rs","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6331,"byte_end":6335,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"Both","qualname":"::AddBounds::Both","value":"AddBounds::Both","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Add for fields and generics\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":179},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6361,"byte_end":6367,"line_start":201,"line_end":201,"column_start":5,"column_end":11},"name":"Fields","qualname":"::AddBounds::Fields","value":"AddBounds::Fields","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Fields only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":181},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6395,"byte_end":6403,"line_start":203,"line_end":203,"column_start":5,"column_end":13},"name":"Generics","qualname":"::AddBounds::Generics","value":"AddBounds::Generics","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Generics only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":183},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6422,"byte_end":6426,"line_start":205,"line_end":205,"column_start":5,"column_end":9},"name":"None","qualname":"::AddBounds::None","value":"AddBounds::None","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":185},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6451,"byte_end":6466,"line_start":207,"line_end":207,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::AddBounds::__Nonexhaustive","value":"AddBounds::__Nonexhaustive","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":176},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6279,"byte_end":6288,"line_start":197,"line_end":197,"column_start":10,"column_end":19},"name":"AddBounds","qualname":"::AddBounds","value":"AddBounds::{Both, Fields, Generics, None, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185}],"decl_id":null,"docs":" Changes how bounds are added\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6270,"byte_end":6469,"line_start":197,"line_end":208,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6270,"byte_end":6469,"line_start":197,"line_end":208,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":200},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6617,"byte_end":6621,"line_start":214,"line_end":214,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6643,"byte_end":6650,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":204},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6672,"byte_end":6675,"line_start":218,"line_end":218,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":206},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6701,"byte_end":6707,"line_start":220,"line_end":220,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":199},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6589,"byte_end":6598,"line_start":212,"line_end":212,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6580,"byte_end":6710,"line_start":212,"line_end":221,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6580,"byte_end":6710,"line_start":212,"line_end":221,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":220},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10451,"byte_end":10462,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10440,"byte_end":10793,"line_start":324,"line_end":336,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":222},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10531,"byte_end":10538,"line_start":326,"line_end":326,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":223},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10620,"byte_end":10625,"line_start":329,"line_end":329,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":11079,"byte_end":11082,"line_start":347,"line_end":347,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":11814,"byte_end":11817,"line_start":376,"line_end":376,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":12975,"byte_end":12995,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13457,"byte_end":13467,"line_start":426,"line_end":426,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13446,"byte_end":13614,"line_start":426,"line_end":431,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13446,"byte_end":13614,"line_start":426,"line_end":431,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":246},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13482,"byte_end":13487,"line_start":427,"line_end":427,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::Attribute]","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":247},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13514,"byte_end":13519,"line_start":428,"line_end":428,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":248},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13540,"byte_end":13546,"line_start":429,"line_end":429,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::Fields","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":249},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13568,"byte_end":13580,"line_start":430,"line_end":430,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::Expr)>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":269},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13808,"byte_end":13819,"line_start":436,"line_end":436,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13797,"byte_end":13977,"line_start":436,"line_end":442,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":271},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":13834,"byte_end":13840,"line_start":437,"line_end":437,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":16896,"byte_end":16904,"line_start":527,"line_end":527,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":17038,"byte_end":17050,"line_start":532,"line_end":532,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":17279,"byte_end":17282,"line_start":538,"line_end":538,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":17411,"byte_end":17427,"line_start":543,"line_end":543,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":18192,"byte_end":18195,"line_start":572,"line_end":572,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":20471,"byte_end":20480,"line_start":644,"line_end":644,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":22746,"byte_end":22750,"line_start":712,"line_end":712,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":24206,"byte_end":24210,"line_start":760,"line_end":760,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":26023,"byte_end":26029,"line_start":817,"line_end":817,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":26451,"byte_end":26465,"line_start":834,"line_end":834,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":27706,"byte_end":27715,"line_start":875,"line_end":875,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":29257,"byte_end":29269,"line_start":926,"line_end":926,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":30501,"byte_end":30521,"line_start":967,"line_end":967,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":30930,"byte_end":30939,"line_start":979,"line_end":979,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":30919,"byte_end":31099,"line_start":979,"line_end":985,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":31241,"byte_end":31244,"line_start":990,"line_end":990,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":33367,"byte_end":33375,"line_start":1046,"line_end":1046,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":33511,"byte_end":33523,"line_start":1051,"line_end":1051,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":33718,"byte_end":33721,"line_start":1057,"line_end":1057,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":33860,"byte_end":33876,"line_start":1062,"line_end":1062,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":35127,"byte_end":35131,"line_start":1102,"line_end":1102,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":36745,"byte_end":36749,"line_start":1155,"line_end":1155,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":38397,"byte_end":38409,"line_start":1210,"line_end":1210,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":40284,"byte_end":40290,"line_start":1270,"line_end":1270,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":41903,"byte_end":41913,"line_start":1324,"line_end":1324,"column_start":12,"column_end":22},"name":"add_bounds","qualname":"<Structure>::add_bounds","value":"fn (&mut self, mode: AddBounds) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify which bounds should be generated by impl-generating functions\n such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":43226,"byte_end":43241,"line_start":1368,"line_end":1368,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":43665,"byte_end":43679,"line_start":1385,"line_end":1385,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":44908,"byte_end":44917,"line_start":1426,"line_end":1426,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":46419,"byte_end":46431,"line_start":1477,"line_end":1477,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":47691,"byte_end":47711,"line_start":1520,"line_end":1520,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":49505,"byte_end":49521,"line_start":1574,"line_end":1574,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":50008,"byte_end":50024,"line_start":1587,"line_end":1587,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>, mode: AddBounds) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":54687,"byte_end":54697,"line_start":1716,"line_end":1716,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":57322,"byte_end":57339,"line_start":1791,"line_end":1791,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":59522,"byte_end":59534,"line_start":1856,"line_end":1856,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":61767,"byte_end":61786,"line_start":1922,"line_end":1922,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":61742,"byte_end":61755,"line_start":1921,"line_end":1921,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":70111,"byte_end":70119,"line_start":2148,"line_end":2148,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":74427,"byte_end":74441,"line_start":2280,"line_end":2280,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6730,"byte_end":6739,"line_start":223,"line_end":223,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10817,"byte_end":10828,"line_start":338,"line_end":338,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10945,"byte_end":10956,"line_start":344,"line_end":344,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":14484,"byte_end":14500,"line_start":455,"line_end":455,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":15497,"byte_end":15508,"line_start":488,"line_end":488,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":31110,"byte_end":31119,"line_start":987,"line_end":987,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":32374,"byte_end":32388,"line_start":1014,"line_end":1014,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6177,"byte_end":6183,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":49}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":6730,"byte_end":6739,"line_start":223,"line_end":223,"column_start":19,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":199},"to":{"krate":18,"index":66}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10817,"byte_end":10828,"line_start":338,"line_end":338,"column_start":23,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":220},"to":{"krate":18,"index":66}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":10945,"byte_end":10956,"line_start":344,"line_end":344,"column_start":10,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":14484,"byte_end":14500,"line_start":455,"line_end":455,"column_start":28,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":76},"to":{"krate":19,"index":2218}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":15497,"byte_end":15508,"line_start":488,"line_end":488,"column_start":10,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":31110,"byte_end":31119,"line_start":987,"line_end":987,"column_start":10,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.10.2/src/lib.rs","byte_start":32374,"byte_end":32388,"line_start":1014,"line_end":1014,"column_start":38,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":121},"to":{"krate":2,"index":1446}}]}