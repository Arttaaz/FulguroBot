{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4","program":"/home/arttaaz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","autocfg","/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=d34c4abb28f3a602","-C","extra-filename=-d34c4abb28f3a602","--out-dir","/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps","-L","dependency=/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/arttaaz/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/arttaaz/Documents/rust/fulgurobot_db/target/rls/debug/deps/libautocfg-d34c4abb28f3a602.rmeta"},"prelude":{"crate_id":{"name":"autocfg","disambiguator":[7604648396009301571,18231812702295821651]},"crate_root":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src","external_crates":[{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15898664672860565043,11507415047301910426]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12015790801788081536,12907150729797279212]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7883193221474685823,4751424176860928009]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16613161923873549938,14995778479778385738]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5004834090936050992,6471634663823578036]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11446119019713242356,2604044839202152600]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15268581892012785008,4107617063810618496]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7224674827591579222,6632076422290107852]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11517724716759652023,4917736713351877169]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5844817230926680697,5589800783749782108]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[17744420590937272489,5474835466175275207]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[2981351777305219230,718285904255885081]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[7543414863148407695,11516516886599562523]}},{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[194739072426214368,18332744792401463366]}}],"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":0,"byte_end":9513,"line_start":1,"line_end":305,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":1525,"byte_end":1530,"line_start":51,"line_end":51,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":0,"byte_end":9513,"line_start":1,"line_end":305,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":53},{"krate":0,"index":127},{"krate":0,"index":135},{"krate":0,"index":133},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":77}],"decl_id":null,"docs":" A Rust library for build scripts to automatically configure code based on\n compiler support.  Code snippets are dynamically tested to see if the `rustc`\n will accept them, rather than hard-coding specific version support.","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":1182,"byte_end":1221,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":1222,"byte_end":1244,"line_start":38,"line_end":38,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/error.rs","byte_start":9664,"byte_end":9669,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":80}],"decl_id":null,"docs":" A common error type for the `autocfg` crate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":1703,"byte_end":1710,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"AutoCfg","qualname":"::AutoCfg","value":"AutoCfg {  }","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" Helper to detect compiler features for `cfg` output in build scripts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2009,"byte_end":2013,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"emit","qualname":"::emit","value":"fn (cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a config flag for rustc on standard out.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2349,"byte_end":2359,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"rerun_path","qualname":"::rerun_path","value":"fn (path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if `path` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2737,"byte_end":2746,"line_start":95,"line_end":95,"column_start":8,"column_end":17},"name":"rerun_env","qualname":"::rerun_env","value":"fn (var: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if the environment\n variable `var` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2929,"byte_end":2932,"line_start":104,"line_end":104,"column_start":8,"column_end":11},"name":"new","qualname":"::new","value":"fn () -> AutoCfg","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":3304,"byte_end":3307,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<AutoCfg>::new","value":"fn () -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":3808,"byte_end":3816,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"with_dir","qualname":"<AutoCfg>::with_dir","value":"fn <T> (dir: T) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance with the specified output directory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":5116,"byte_end":5135,"line_start":167,"line_end":167,"column_start":12,"column_end":31},"name":"probe_rustc_version","qualname":"<AutoCfg>::probe_rustc_version","value":"fn (&self, major: usize, minor: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the current `rustc` reports a version greater than\n or equal to \"`major`.`minor`\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":5395,"byte_end":5413,"line_start":173,"line_end":173,"column_start":12,"column_end":30},"name":"emit_rustc_version","qualname":"<AutoCfg>::emit_rustc_version","value":"fn (&self, major: usize, minor: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\n if the current `rustc` is at least that version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":6863,"byte_end":6873,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"probe_path","qualname":"<AutoCfg>::probe_path","value":"fn (&self, path: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given path can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":7182,"byte_end":7195,"line_start":226,"line_end":226,"column_start":12,"column_end":25},"name":"emit_has_path","qualname":"<AutoCfg>::emit_has_path","value":"fn (&self, path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_PATH` if `probe_path` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":7398,"byte_end":7411,"line_start":233,"line_end":233,"column_start":12,"column_end":25},"name":"emit_path_cfg","qualname":"<AutoCfg>::emit_path_cfg","value":"fn (&self, path: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_path` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":7739,"byte_end":7750,"line_start":246,"line_end":246,"column_start":12,"column_end":23},"name":"probe_trait","qualname":"<AutoCfg>::probe_trait","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given trait can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":8101,"byte_end":8115,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"emit_has_trait","qualname":"<AutoCfg>::emit_has_trait","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TRAIT` if `probe_trait` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":8320,"byte_end":8334,"line_start":262,"line_end":262,"column_start":12,"column_end":26},"name":"emit_trait_cfg","qualname":"<AutoCfg>::emit_trait_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_trait` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":8651,"byte_end":8661,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"probe_type","qualname":"<AutoCfg>::probe_type","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given type can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":8997,"byte_end":9010,"line_start":284,"line_end":284,"column_start":12,"column_end":25},"name":"emit_has_type","qualname":"<AutoCfg>::emit_has_type","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TYPE` if `probe_type` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":9213,"byte_end":9226,"line_start":291,"line_end":291,"column_start":12,"column_end":25},"name":"emit_type_cfg","qualname":"<AutoCfg>::emit_type_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_type` returns true.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/error.rs","byte_start":9718,"byte_end":9723,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/error.rs","byte_start":10086,"byte_end":10091,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/version.rs","byte_start":11217,"byte_end":11224,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2984,"byte_end":2991,"line_start":108,"line_end":108,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/error.rs","byte_start":9718,"byte_end":9723,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":1542}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/error.rs","byte_start":10086,"byte_end":10091,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":6826}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/version.rs","byte_start":11217,"byte_end":11224,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/arttaaz/.cargo/registry/src/github.com-1ecc6299db9ec823/autocfg-0.1.4/src/lib.rs","byte_start":2984,"byte_end":2991,"line_start":108,"line_end":108,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}}]}